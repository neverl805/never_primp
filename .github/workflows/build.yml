name: Build and Publish never_primp

on:
  # 手动触发工作流
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: '是否发布到 PyPI (true/false)'
        required: true
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

  # 当推送 tag 时自动触发并发布
  push:
    tags:
      - 'v*.*.*'

  # 推送到 main 分支时仅构建不发布
  push:
    branches:
      - main
      - master

permissions:
  contents: read

jobs:
  # ==================== Linux 平台构建 ====================
  build-linux:
    name: Build Linux ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64        # Linux x64 (最常用)
          - aarch64       # Linux ARM64 (服务器)
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto

      - name: List built wheels
        run: ls -lh dist/

      - name: Test wheel (x86_64 only)
        if: matrix.target == 'x86_64'
        run: |
          pip install never_primp --no-index --find-links dist --force-reinstall
          python -c "import never_primp; print('✅ Import test passed')"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}
          path: dist

  # ==================== Windows 平台构建 ====================
  build-windows:
    name: Build Windows ${{ matrix.target }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: ${{ matrix.target }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: List built wheels
        run: dir dist

      - name: Test wheel
        run: |
          pip install never_primp --no-index --find-links dist --force-reinstall
          python -c "import never_primp; print('✅ Import test passed')"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}
          path: dist

  # ==================== macOS 平台构建 ====================
  build-macos:
    name: Build macOS ${{ matrix.target }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64        # Intel Mac
          - aarch64       # Apple Silicon (M1/M2/M3)
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: List built wheels
        run: ls -lh dist/

      - name: Test wheel (x86_64 only)
        if: matrix.target == 'x86_64'
        run: |
          pip install never_primp --no-index --find-links dist --force-reinstall
          python -c "import never_primp; print('✅ Import test passed')"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}
          path: dist

  # ==================== 构建源码分发包 ====================
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: List sdist
        run: ls -lh dist/

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  # ==================== 发布到 PyPI ====================
  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, build-sdist]
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: List all packages
        run: |
          echo "========================================="
          echo "📦 准备发布的所有包："
          echo "========================================="
          ls -lh dist/
          echo ""
          echo "========================================="
          echo "📋 包列表："
          echo "========================================="
          for file in dist/*; do
            echo "  ✓ $(basename $file)"
          done
          echo ""
          echo "========================================="

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*

      - name: Success message
        run: |
          echo "========================================="
          echo "✅ 发布成功！"
          echo "========================================="
          echo "用户现在可以通过以下命令安装："
          echo "  pip install never_primp"
          echo ""
          echo "查看项目："
          echo "  https://pypi.org/project/never_primp/"
          echo "========================================="

  # ==================== 仅构建不发布 ====================
  show-artifacts:
    name: Show Build Artifacts
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, build-sdist]
    if: |
      (github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'false')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Show build results
        run: |
          echo "========================================="
          echo "✅ 所有平台构建成功！"
          echo "========================================="
          echo ""
          echo "📦 构建的包："
          ls -lh dist/
          echo ""
          echo "========================================="
          echo "📋 平台支持："
          echo "========================================="
          for file in dist/*.whl; do
            echo "  ✓ $(basename $file)"
          done
          echo ""
          echo "========================================="
          echo "📥 下载说明："
          echo "========================================="
          echo "1. 在 Actions 页面下载 'all-wheels' artifact"
          echo "2. 手动发布到 PyPI："
          echo "   pip install twine"
          echo "   twine upload dist/*"
          echo ""
          echo "或者重新运行工作流并选择发布选项"
          echo "========================================="

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-wheels
          path: dist
          retention-days: 30
